{{- if .Values.ecr }}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  annotations:
  name: {{ include "devops-in-a-box-namespace.fullname" . }}-ecr-pull-secret
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      creationTimestamp: null
    spec:
      template:
        metadata:
          creationTimestamp: null
        spec:
          containers:
          - command:
            - /bin/sh
            - -c
            - |-
              SECRET_NAME={{ include "devops-in-a-box-namespace.fullname" . }}-pull-secret
              kubectl delete secret --ignore-not-found ${SECRET_NAME}
              kubectl create secret docker-registry ${SECRET_NAME} \
              --docker-server=https://{{ .Values.ecr.accountId }}.dkr.ecr.{{ .Values.ecr.region }}.amazonaws.com \
              --docker-username=AWS \
              --docker-password=`aws ecr get-login --region {{ .Values.ecr.region }} --registry-ids {{ .Values.ecr.accountId }} | cut -d' ' -f6` \
              --docker-email="anymail.doesnt.matter@email.com"
              echo "Created secret $SECRET_NAME"
            env:
            - name: AWS_DEFAULT_REGION
              value: {{ .Values.ecr.region }}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "devops-in-a-box-namespace.fullname" . }}-aws-secret
                  key: secretAccessKey
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "devops-in-a-box-namespace.fullname" . }}-aws-secret
                  key: accessKeyId
            image: odaniait/aws-kubectl:latest
            imagePullPolicy: IfNotPresent
            name: ecr-cred-helper
            resources: {}
            securityContext:
              capabilities: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: Default
          hostNetwork: true
          restartPolicy: Never
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
  schedule: 0 */6 * * *
  successfulJobsHistoryLimit: 3
  suspend: false
  {{- end }}